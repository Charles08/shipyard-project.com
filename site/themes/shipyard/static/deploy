#!/bin/bash
set -e

if [ "$1" != "" ] && [ "$1" = "-h" ]; then
    echo "Shipyard Deploy uses the following environment variables:"
    echo "  PROVIDER: this selects which provider to use with Docker Machine"
    echo "  ACTION: this is the action to use (install, upgrade, node, destroy)"
    echo "  NAME: (optional) specify the name of the machine"
    echo "  IMAGE: this overrides the default Shipyard image"
    echo "  MACHINE_ARGS: these are passed to Docker Machine during machine creation"
    echo "  SHIPYARD_ARGS: these are passed to the Shipyard controller container as controller args"
    exit 1
fi

if [ -z "`which docker`" ]; then
    echo "You must have the Docker CLI installed on your \$PATH"
    echo "  See http://docs.docker.com for details"
    exit 1
fi

if [ -z "`which docker-machine`" ]; then
    echo "You must have Docker Machine installed on your \$PATH"
    echo "  See http://docs.docker.com/machine for details"
    exit 1
fi

ACTION=${ACTION:-install}
PROVIDER=${PROVIDER:-virtualbox}
IMAGE=${IMAGE:-ehazlett/shipyard:v3}
SHIPYARD_ARGS=${SHIPYARD_ARGS:-""}
HOST_CERT_PATH="/etc/docker"
MACHINE_ARGS=${MACHINE_ARGS:-""}
NAME=${NAME:-""}
NODES_FILE=.nodes

if [ "$PROVIDER" = "virtualbox" ]; then
    HOST_CERT_PATH="/var/lib/boot2docker"
fi

deploy_shipyard_controller() {
    docker $(docker-machine config $NAME) run \
      -d \
      -ti \
      -p 8080:8080 \
      --restart=always \
      --link shipyard-rethinkdb:rethinkdb \
      -v $HOST_CERT_PATH:/etc/docker:ro \
      --name shipyard \
      $IMAGE server \
      --rethinkdb-addr=rethinkdb:28015 \
      -d tcp://$(docker-machine ip $NAME):3376 \
      --tls-ca-cert /etc/docker/ca.pem \
      --tls-cert /etc/docker/server.pem \
      --tls-key /etc/docker/server-key.pem \
      --auth-whitelist-cidr 127.0.0.0/8 $SHIPYARD_ARGS
}

get_swarm_master() {
    NODES=`cat $NODES_FILE`
    NODES=($NODES)

    SWARM_MASTER=${NODES[0]}
}

if [ "$ACTION" = "install" ]; then
    echo "Deploying Shipyard using $PROVIDER..."
    TOKEN=`curl -s -XPOST https://discovery-stage.hub.docker.com/v1/clusters`

    if [ -z "$NAME" ]; then
        NAME=shipyard-swarm-master
    fi

    docker-machine create -d $PROVIDER $MACHINE_ARGS --swarm --swarm-discovery token://$TOKEN --swarm-master $NAME
    
    docker $(docker-machine config $NAME) run \
        -d \
        --restart=always \
        --name shipyard-rethinkdb \
        shipyard/rethinkdb
    
    deploy_shipyard_controller

    SHIPYARD_IP=`docker-machine ip $NAME`
    
    echo "$NAME" >> $NODES_FILE

    echo "Shipyard v3 available at http://$SHIPYARD_IP:8080"
    echo "Username: admin Password: shipyard"
    
    echo "To remove, run docker-machine rm $NAME"

elif [ "$ACTION" = "node" ]; then
    get_swarm_master

    echo "Adding node using $PROVIDER"
    ARGS="`docker $(docker-machine config $SWARM_MASTER) inspect --format='{{range $v := .Config.Cmd}} {{$v}} {{end}}' swarm-agent-master`"
    TOKEN=""
    for ARG in $ARGS; do
        if [[ $ARG == *"token://"* ]]; then
            TOKEN=$ARG
        fi
    done

    if [ -z "$TOKEN" ]; then
        echo "Unable to detect token"
        exit 1
    fi

    if [ -z "$NAME" ]; then
        # get current number of nodes
        NODES=`cat $NODES_FILE | wc -l`
        NODE_NUM=$((NODES+1))
        NAME=shipyard-swarm-node-$PROVIDER-$NODE_NUM
    fi

    docker-machine create -d $PROVIDER $MACHINE_ARGS --swarm --swarm-discovery $TOKEN $NAME

    echo "$NAME" >> $NODES_FILE

    echo "Added node $NAME to cluster"
    echo "To remove, run docker-machine rm $NAME"

elif [ "$ACTION" = "upgrade" ]; then
    get_swarm_master

    echo "Upgrading Shipyard"
    docker $(docker-machine config $SWARM_MASTER) pull $IMAGE

    docker $(docker-machine config $SWARM_MASTER) rm -fv shipyard

    deploy_shipyard_controller

    echo "Shipyard controller updated"

elif [ "$ACTION" = "destroy" ]; then
    NODES=`cat $NODES_FILE`
    NODES=($NODES)

    get_swarm_master

    # get swarm token to delete the cluster
    ARGS="`docker $(docker-machine config $SWARM_MASTER) inspect --format='{{range $v := .Config.Cmd}} {{$v}} {{end}}' swarm-agent-master`"
    TOKEN=""
    for ARG in $ARGS; do
        if [[ $ARG == *"token://"* ]]; then
            TOKEN=$ARG
        fi
    done

    # split out the actual token
    IFS=':' read -a tkn <<< $TOKEN
    t=`echo "${tkn[1]}" | tr -d '//'`

    # delete the cluster
    curl -s -o /dev/null -XDELETE https://discovery-stage.hub.docker.com/v1/clusters/$t

    # remove the nodes
    echo "Destroying Shipyard"
    for NODE in ${NODES[@]}; do
        docker-machine rm $NODE
    done

    echo "Shipyard Removed"
    rm $NODES_FILE
else
    echo "Unknown action $ACTION"
    exit 1
fi
